repositories:

- name: cilium
  url: https://helm.cilium.io/
- name: localpv-provisioner
  url: https://openebs.github.io/dynamic-localpv-provisioner
- name: argo
  url: https://argoproj.github.io/argo-helm

releases:
  - name: argocd
    namespace: argocd
    chart: argo/argo-cd
    version: 7.3.3

  - name: localpv-provisioner
    namespace: openebs
    chart: localpv-provisioner/localpv-provisioner
    version: 4.1.0
    values:
      - analytics:
          enabled: false


  - name: cilium
    namespace: kube-system
    chart: cilium/cilium
    version: 1.15.7
    values:
         # required for kubevirt to reach k8s services
         - socketLB:
             hostNamespaceOnly: true

         - routingMode: native
         - ipam:
             mode: kubernetes
         - endpointRoutes:
             enabled: true
         - ipv4NativeRoutingCIDR: 10.0.0.0/8
         - ipv6:
             enabled: true
         - ipv6NativeRoutingCIDR: fd30:cccc::/16

         # TODO DSR doesnt work. i'm getting reset packets from nowhere
         #- loadBalancer:
         #    mode: dsr
         #    dsrDispatch: geneve

         # their nat implementation chooses a random source address. so we need to use nftables
         - enableIPv4Masquerade: false
         - enableIPv6Masquerade: false
         - bpf:
             hostLegacyRouting: true

         # the kube-proxy replacement seems to work well
         - kubeProxyReplacement: true
         - k8sServiceHost: k8s
         - k8sServicePort: 4443
         - hubble:

             enabled: true

             relay:
               enabled: true


               # fixme: doesnt exist at bootstrap time
               #prometheus:
               #  enabled: true
               #  serviceMonitor:
               #    enabled: true

             ui:
               enabled: true

             #metrics:
             #  serviceMonitor:
             #    enabled: true

         # this replaces kube-vip entirely
         - bgpControlPlane:
             enabled: true

         # our underlay is l3, and this installs unresolveable ip neigh entries
         - l2NeighDiscovery:
             enabled: false
